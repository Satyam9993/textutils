{"version":3,"sources":["component/About.js","component/Navbar.js","component/TextForm.js","component/Alert.js","component/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","className","style","color","Mode","id","type","backgroundColor","Navbar","href","title","aboutTitle","onClick","togglemode_blue","role","txtcolor","htmlFor","togglemode","Modetxt","TextForm","useState","text","setText","Counttext","setCountText","heading","subheading","value","onChange","event","target","rows","newtext","toUpperCase","showAlert","toLowerCase","console","log","a","split","ans","i","length","trim","txt","document","getElementById","select","navigator","clipboard","writeText","placeholder","countword","Alert","alert","msg","Footer","defaultProps","App","mode","setmode","modetxt","setmodetxt","settxtcolor","skyblue","setskyblue","setalert","message","setTimeout","body","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uKAAe,SAASA,EAAMC,GAC1B,OACI,8BACI,qBAAKC,UAAU,YAAYC,MAAO,CAACC,MAAqB,SAAfH,EAAMI,KAAgB,QAAQ,SAAvE,SACI,sBAAKH,UAAU,YAAYI,GAAG,mBAA9B,UACI,sBAAKJ,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBI,GAAG,aAApC,SACI,wBAAQJ,UAAU,0CAA0CK,KAAK,SAAU,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAAeJ,MAAO,CAACK,gBAAgC,SAAfP,EAAMI,KAAgB,UAAU,SAA9O,iCAIJ,qBAAKC,GAAG,cAAcJ,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,sBAAKA,UAAU,iBAAiBC,MAAO,CAACK,gBAAgC,SAAfP,EAAMI,KAAgB,UAAU,SAAzF,UACI,8EADJ,6WACua,mDADva,uDAKR,sBAAKH,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBI,GAAG,aAApC,SACI,wBAAQJ,UAAU,0CAA0CK,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAeJ,MAAO,CAACK,gBAAgC,SAAfP,EAAMI,KAAgB,UAAU,SAA9O,iCAIJ,qBAAKC,GAAG,cAAcJ,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,sBAAKA,UAAU,iBAAiBC,MAAO,CAACK,gBAAgC,SAAfP,EAAMI,KAAgB,UAAU,SAAzF,UACI,+EADJ,8WACya,mDADza,uDAKR,sBAAKH,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBI,GAAG,eAApC,SACI,wBAAQJ,UAAU,0CAA0CK,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAAiBJ,MAAO,CAACK,gBAAgC,SAAfP,EAAMI,KAAgB,UAAU,SAAlP,iCAIJ,qBAAKC,GAAG,gBAAgBJ,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,sBAAKA,UAAU,iBAAkBC,MAAO,CAACK,gBAAgC,SAAfP,EAAMI,KAAgB,UAAU,SAA1F,UACI,8EADJ,8WACwa,mDADxa,8DChCb,SAASI,EAAOR,GAC3B,OACI,8BACI,qBAAKC,UAAS,yCAAoCD,EAAMI,KAA1C,eAAqDJ,EAAMI,MAAzE,SACI,sBAAKH,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeQ,KAAK,IAAjC,SAAsCT,EAAMU,QAC5C,wBAAQT,UAAU,iBAAiBK,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAML,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BI,GAAG,yBAA7C,UACI,qBAAIJ,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkB,eAAa,OAAOQ,KAAK,IAAxD,oBAEJ,oBAAIR,UAAU,WAAd,SACI,mBAAGA,UAAU,WAAWQ,KAAK,IAA7B,SAAkCT,EAAMW,kBAGhD,sBAAKV,UAAU,8BAAf,UACG,uBAAOA,UAAU,mBAAmBW,QAASZ,EAAMa,gBAAiBP,KAAK,WAAWQ,KAAK,SAAST,GAAG,2BACrG,uBAAOJ,UAAS,2BAAsBD,EAAMe,UAAYC,QAAQ,yBAAhE,8BAEH,sBAAKf,UAAU,8BAAf,UACG,uBAAOA,UAAU,mBAAmBW,QAASZ,EAAMiB,WAAYX,KAAK,WAAWQ,KAAK,SAAST,GAAG,2BAChG,uBAAOJ,UAAS,2BAAsBD,EAAMe,UAAYC,QAAQ,yBAAhE,SAA0FhB,EAAMkB,uBCzB5G,SAASC,EAASnB,GAC7B,MAAwBoB,mBAAS,mBAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,SAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KA0EA,OACI,gCACI,sBAAKvB,UAAU,YAAYC,MAAO,CAACC,MAAqB,SAAfH,EAAMI,KAAgB,QAAQ,SAAvE,UACI,6BAAKJ,EAAMyB,UACX,sBAAKxB,UAAU,YAAf,UACQ,wBAAOe,QAAQ,QAAQf,UAAU,aAAjC,UAA+CD,EAAM0B,WAArD,OACA,0BAAUzB,UAAU,eAAe0B,MAAON,EAAMO,SAhB5C,SAACC,GACrBP,EAAQO,EAAMC,OAAOH,QAesEtB,GAAG,QAAQ0B,KAAK,KAAK7B,MAAO,CAACK,gBAA+B,SAAfP,EAAMI,KAAgB,QAAQ,QAASD,MAAsB,SAAfH,EAAMI,KAAiB,QAAQ,WACzM,yBAASH,UAAU,uBAAuBW,QA9E7B,WACzB,IAAIoB,EAAUX,EAAKY,cACnBX,EAAQU,GACRhC,EAAMkC,UAAU,8BAA+B,WA2EnC,wBACA,yBAASjC,UAAU,4BAA4BW,QAzElC,WACzB,IAAIoB,EAAUX,EAAKc,cACnBb,EAAQU,GACRhC,EAAMkC,UAAU,8BAA+B,WAsEnC,wBACA,yBAASjC,UAAU,4BAA4BW,QAhCpC,WACvBwB,QAAQC,IAAI,UAGZ,IAFA,IAAIC,EAAIjB,EAAKkB,MAAM,KACfC,EAAI,GACAC,EAAIH,EAAEI,OAAO,EAAGD,GAAK,EAAGA,IAE5BD,EAAMA,EAAM,IAAKF,EAAEG,GAEvBnB,EAAQkB,EAAIG,QACZ3C,EAAMkC,UAAU,qBAAsB,WAuB1B,4BACA,yBAASjC,UAAU,4BAA4BW,QArEtC,WACrBU,EAAQ,IACRtB,EAAMkC,UAAU,oBAAqB,WAmEzB,mBACA,yBAASjC,UAAU,4BAA4BW,QAhE5C,WACfwB,QAAQC,IAAI,aACZ,IAAIO,EAAMC,SAASC,eAAe,SAClCF,EAAIG,SACJC,UAAUC,UAAUC,UAAUN,EAAIjB,OAClC3B,EAAMkC,UAAU,YAAa,WA2DjB,kBAEA,sBAAKjC,UAAU,YAAf,UACI,uBAAOe,QAAQ,YAAYf,UAAU,aAArC,wBACA,uBAAOK,KAAK,OAAOL,UAAU,eAAe0B,MAAOJ,EAAWK,SApB1D,SAACC,GACrBL,EAAaK,EAAMC,OAAOH,QAmB+EtB,GAAG,YAAYH,MAAO,CAACK,gBAA+B,SAAfP,EAAMI,KAAgB,QAAQ,QAASD,MAAsB,SAAfH,EAAMI,KAAiB,QAAQ,SAAU+C,YAAY,aAEvO,yBAASlD,UAAU,4BAA4BW,QAvDnC,WAGxB,IAFA,IAAI0B,EAAIjB,EAAKkB,MAAM,KACfa,EAAY,EACRX,EAAI,EAAGA,EAAIH,EAAEI,OAAQD,IAEtBH,EAAEG,KAAOlB,GAER6B,IAGR5B,EAAa,qBAAsBD,EAAW,OAAO6B,GACrDA,EAAY,GA4CA,mBACA,yBAASnD,UAAU,4BAA4BW,QA9DrC,WACtBY,EAAa,IACbxB,EAAMkC,UAAU,oBAAqB,WA4DzB,yBAGR,sBAAKjC,UAAU,iBAAiBC,MAAO,CAACC,MAAqB,SAAfH,EAAMI,KAAgB,QAAQ,SAA5E,UACI,mDACA,8BAAa,KAATiB,EAAa,EAAIA,EAAKsB,OAAOJ,MAAM,KAAKG,OAA5C,WAA4DrB,EAAKqB,OAAjE,kBACA,yCACA,4BAAIrB,UCtGL,SAASgC,EAAMrD,GAC1B,OACIA,EAAMsD,OAAS,8BACX,sBAAKrD,UAAU,kDAAkDa,KAAK,QAAtE,UACI,mCAASd,EAAMsD,MAAMC,IAArB,KAA4BvD,EAAMsD,MAAMhD,KAAxC,OACA,wBAAQA,KAAK,SAASL,UAAU,YAAY,kBAAgB,QAAQ,aAAW,eCLhF,SAASuD,IACpB,OACI,wBH2CRhD,EAAOiD,aAAe,CAClB/C,MAAQ,SACRC,WAAa,UIoCF+C,MAvEf,WACE,MAAwBtC,mBAAS,SAAjC,mBAAOuC,EAAP,KAAaC,EAAb,KACA,EAA8BxC,mBAAS,cAAvC,mBAAOyC,EAAP,KAAgBC,EAAhB,KACA,EAAgC1C,mBAAS,aAAzC,mBAAOL,EAAP,KAAiBgD,EAAjB,KAGA,EAA8B3C,oBAAS,GAAvC,mBAAO4C,EAAP,KAAgBC,EAAhB,KAGA,EAA0B7C,mBAAS,MAAnC,mBAAOkC,EAAP,KAAcY,EAAd,KAGMhC,EAAY,SAACiC,EAAS7D,GAC1B4D,EAAS,CACLX,IAAIY,EACJ7D,KAAMA,IAGV8D,YAAW,WACTF,EAAS,QACR,MAwCL,OACI,gCACE,cAAC1D,EAAD,CAAQE,MAAM,YAAYC,WAAW,kBAAkBP,KAAMuD,EAAMzC,QAAS2C,EAAS5C,WAvC1E,WACH,UAAP0C,GAEDd,SAASwB,KAAKnE,MAAMK,gBAAgB,UACpCqD,EAAQ,QACRE,EAAW,aACXC,EAAY,cACZ7B,EAAU,mBAAoB,aAG9BW,SAASwB,KAAKnE,MAAMK,gBAAgB,QACpCqD,EAAQ,SACRE,EAAW,cACXC,EAAY,aACZ7B,EAAU,oBAAqB,aAyB8EnB,SAAUA,EAAUF,gBArB/G,YACP,IAAZmD,GAECnB,SAASwB,KAAKnE,MAAMK,gBAAgB,UACpCqD,EAAQ,SACRG,EAAY,cACZ7B,EAAU,uBAAwB,WAClC+B,GAAW,KAGXpB,SAASwB,KAAKnE,MAAMK,gBAAgB,QACpCqD,EAAQ,SACRE,EAAW,cACXC,EAAY,aACZ7B,EAAU,oBAAqB,WAC/B+B,GAAW,OAOX,cAACZ,EAAD,CAAOC,MAAOA,IACd,cAACnC,EAAD,CAAUM,QAAQ,uBAAuBC,WAAW,WAAWtB,KAAMuD,EAAMzB,UAAWA,IACtF,cAACnC,EAAD,CAAOuE,OAAK,EAAClE,KAAMuD,IACnB,cAACH,EAAD,QCpEOe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1ByB,K","file":"static/js/main.1cbdbe9e.chunk.js","sourcesContent":["export default function About(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"container\" style={{color:props.Mode === 'dark'?'white':'black'}}>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button collapsed text-primary\" type=\"button\"  data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\"  style={{backgroundColor: props.Mode === 'dark'?'#1d1d1e':'white'}}>\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={{backgroundColor: props.Mode === 'dark'?'#1d1d1e':'white'}}>\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed text-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\"  style={{backgroundColor: props.Mode === 'dark'?'#1d1d1e':'white'}}>\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\" style={{backgroundColor: props.Mode === 'dark'?'#1d1d1e':'white'}}>\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\">\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed text-primary\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\"  style={{backgroundColor: props.Mode === 'dark'?'#1d1d1e':'white'}}>\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\"  style={{backgroundColor: props.Mode === 'dark'?'#1d1d1e':'white'}}>\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import {Link} from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"#\">{props.aboutTitle}</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"form-check form-switch mx-3\">\r\n                           <input className=\"form-check-input\" onClick={props.togglemode_blue} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                           <label className={`form-check-label ${props.txtcolor}`} htmlFor=\"flexSwitchCheckDefault\">Sky-Blue Mode</label>\r\n                        </div>\r\n                        <div className=\"form-check form-switch mx-3\">\r\n                           <input className=\"form-check-input\" onClick={props.togglemode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                           <label className={`form-check-label ${props.txtcolor}`} htmlFor=\"flexSwitchCheckDefault\">{props.Modetxt}</label>\r\n                        </div>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutTitle: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title : \"Satyam\",\r\n    aboutTitle : \"Satyam\"\r\n}","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('Enter text here');\r\n    const [Counttext, setCountText] = useState('Empty');\r\n\r\n    //handling uppercase\r\n    const handeluppercaseclick = ()=>{\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Text coverting to upperCase\", \"Sucess\");\r\n    }\r\n    // handling lower case\r\n    const handellowercaseclick = ()=>{\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Text coverting to lowerCase\", \"Sucess\");\r\n    }\r\n    // handling clear text button\r\n    const handelclearclick = ()=>{\r\n        setText(\"\");\r\n        props.showAlert(\"Clearing all text\", \"Sucess\");\r\n    }\r\n\r\n    // handling copy text button\r\n    const handelcopy = ()=>{\r\n        console.log(\"I am copy\");\r\n        var txt = document.getElementById('myBox');\r\n        txt.select();\r\n        navigator.clipboard.writeText(txt.value);\r\n        props.showAlert(\"Copy text\", \"Sucess\");\r\n    }\r\n\r\n    // handling Count Word text\r\n    const handelclearclick2 = ()=>{\r\n        setCountText(\"\");\r\n        props.showAlert(\"Clearing all text\", \"Sucess\");  \r\n    }\r\n\r\n    // handling count word case\r\n    const handelCountwordclick =()=>{\r\n        let a = text.split(\" \");\r\n        let countword = 0;\r\n        for(let i = 0; i < a.length; i++)\r\n        {\r\n            if(a[i] === Counttext)\r\n            {\r\n                countword++;\r\n            }\r\n        }\r\n        setCountText('Total no of words '+ Counttext +' is '+countword);\r\n        countword = 0;\r\n    }\r\n\r\n    // reversing the string\r\n    const handelreverseclick = ()=>{\r\n        console.log(\"Hello \");\r\n        let a = text.split(\" \");\r\n        let ans=\"\";\r\n        for(let i = a.length-1; i >= 0; i--)\r\n        {\r\n            ans = ans + \" \"+ a[i];\r\n        }\r\n        setText(ans.trim());\r\n        props.showAlert(\"Reversing all text\", \"Sucess\");\r\n    }\r\n    \r\n    //first form\r\n    const handelOnchange1 = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n    \r\n    // Second form\r\n    const handelOnchange2 = (event)=>{\r\n        setCountText(event.target.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\" style={{color:props.Mode === 'dark'?'white':'black'}}>\r\n                <h3>{props.heading}</h3>\r\n                <div className=\"mb-2 my-2\">\r\n                        <label htmlFor=\"myBox\" className=\"form-label\">{props.subheading} </label>\r\n                        <textarea className=\"form-control\" value={text} onChange={handelOnchange1} id=\"myBox\" rows=\"15\" style={{backgroundColor:props.Mode === 'dark'?'black':'white', color: props.Mode === 'dark'? 'white':'black'}}></textarea>\r\n                    <buttton className=\"btn btn-primary my-2\" onClick={handeluppercaseclick}>Upper Case</buttton>\r\n                    <buttton className=\"btn btn-primary my-2 mx-2\" onClick={handellowercaseclick}>Lower Case</buttton>\r\n                    <buttton className=\"btn btn-primary my-2 mx-2\" onClick={handelreverseclick}>Reverse String</buttton>\r\n                    <buttton className=\"btn btn-primary my-2 mx-2\" onClick={handelclearclick}>Clear</buttton>\r\n                    <buttton className=\"btn btn-primary my-2 mx-2\" onClick={handelcopy}>Copy</buttton>\r\n                     {/*count text word*/}\r\n                    <div className=\"mb-3 my-3\">\r\n                        <label htmlFor=\"countText\" className=\"form-label\">Count Word</label>\r\n                        <input type=\"text\" className=\"form-control\" value={Counttext} onChange={handelOnchange2} id=\"countText\" style={{backgroundColor:props.Mode === 'dark'?'black':'white', color: props.Mode === 'dark'? 'white':'black'}} placeholder=\"Enter\" />\r\n                    </div>\r\n                    <buttton className=\"btn btn-primary my-2 mx-2\" onClick={handelCountwordclick}>Count</buttton>\r\n                    <buttton className=\"btn btn-primary my-2 mx-2\" onClick={handelclearclick2}>Clear</buttton>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-1\" style={{color:props.Mode === 'dark'?'white':'black'}}>\r\n                <h3>Your Text Summary</h3>\r\n                <p>{text === ''? 0 : text.trim().split(\" \").length} words, {text.length} characters.</p>\r\n                <h3>Preview</h3>\r\n                <p>{text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        props.alert && <div>\r\n            <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n                <strong>{props.alert.msg}: {props.alert.type}.</strong>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}","import React, { useState } from 'react'\nimport About from \"./component/About\";\nimport Navbar from \"./component/Navbar\";\nimport TextForm from './component/TextForm';\nimport Alert from './component/Alert';\nimport Footer from './component/Footer';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setmode] = useState('light'); // whether dark mode is enabled or not\n  const [modetxt, setmodetxt] = useState('light mode'); // whether dark mode text\n  const [txtcolor, settxtcolor] = useState('text-dark');\n\n  // sky blue mode\n  const [skyblue, setskyblue] = useState(false)\n\n  // Alert component\n  const [alert, setalert] = useState(null);\n\n\n  const showAlert = (message, type) =>{\n    setalert({\n        msg:message,\n        type: type\n    });\n\n    setTimeout(() => {\n      setalert(null);\n    }, 2000);\n  };\n\n  const togglemode=()=>{\n      if(mode==='light')\n      {\n        document.body.style.backgroundColor='#1d1d1e';\n        setmode('dark');\n        setmodetxt('Dark mode');\n        settxtcolor('text-light');\n        showAlert(\"Dark Mode enable\", \"success\");\n      }\n      else{\n        document.body.style.backgroundColor='white';\n        setmode('light');\n        setmodetxt('Light mode');\n        settxtcolor('text-dark');\n        showAlert(\"Light Mode enable\", \"success\");\n      }\n  };\n\n  const togglemode_blue = ()=>{\n    if(skyblue === false)\n    {\n        document.body.style.backgroundColor='#B3FFFF';\n        setmode('dark ');\n        settxtcolor('text-light');\n        showAlert(\"Sky-Blue Mode enable\", \"success\");\n        setskyblue(true);\n    }\n    else{\n        document.body.style.backgroundColor='white';\n        setmode('light');\n        setmodetxt('Light mode');\n        settxtcolor('text-dark');\n        showAlert(\"Light Mode enable\", \"success\");\n        setskyblue(false);\n    }\n  }\n\n  return (\n      <div>\n        <Navbar title=\"TextUtils\" aboutTitle=\"About TextUtils\" Mode={mode} Modetxt={modetxt} togglemode={togglemode} txtcolor={txtcolor} togglemode_blue={togglemode_blue}/>\n        <Alert alert={alert} />\n        <TextForm heading=\"Enter your text here\" subheading=\"Text Box\" Mode={mode} showAlert={showAlert}/>\n        <About exact Mode={mode}/>\n        <Footer/>\n      </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}